package com.startogamu.zikobot.home.playlists

import android.databinding.ObservableArrayList
import android.os.Bundle
import android.support.animation.DynamicAnimation
import android.support.animation.SpringAnimation
import android.support.animation.SpringForce
import android.view.View
import com.joxad.easydatabinding.fragment.v4.FragmentRecyclerBaseVM
import com.joxad.zikobot.data.db.PlaylistManager
import com.raizlabs.android.dbflow.rx2.kotlinextensions.list
import com.startogamu.zikobot.BR
import com.startogamu.zikobot.NavigationManager
import com.startogamu.zikobot.R
import com.startogamu.zikobot.databinding.PlaylistsFragmentBinding


/**
 * Generated by generator-android-template
 */
class PlaylistsFragmentVM(fragment: PlaylistsFragment, binding: PlaylistsFragmentBinding, savedInstance: Bundle?)
    : FragmentRecyclerBaseVM<PlaylistVM, PlaylistsFragment, PlaylistsFragmentBinding>(fragment, binding, savedInstance) {


    override fun itemData(): Int {
        return BR.playlistVM
    }

    override fun itemLayoutResource(): Int {
        return R.layout.playlist_item
    }

    override fun onCreate(savedInstance: Bundle?) {
        collapseToolbar()
        items = ObservableArrayList()
        loadPlaylists()
        PlaylistManager.INSTANCE.refreshSubject.subscribe({
            items.clear()
            loadPlaylists()
        })

        binding.playlistsFragmentAppBar?.appBarLayout?.addOnOffsetChangedListener { appBarLayout, verticalOffset ->
            if (verticalOffset < 0) {
                initHeader()
            }
        }

    }

    fun collapseToolbar() {
        binding.playlistsFragmentAppBar?.appBarLayout?.setExpanded(false)
    }

    fun expandToolbar(@SuppressWarnings("unused") v: View) {
        binding.playlistsFragmentAppBar?.appBarLayout?.setExpanded(true, true)
    }

    private fun loadPlaylists() {
        PlaylistManager.INSTANCE.findAll().list {
            for (zikoP in it) {
                items.add(PlaylistVM(false, fragment.activity, zikoP))
            }
        }
    }

    /***
     *
     * Show the fragment to sync playlist
     */
    fun syncSpotify(@SuppressWarnings("unused") view: View) {
        NavigationManager.showSpotifySync(fragment.activity)
    }

    /***
     * Init the views of the header
     */
    fun initHeader() {
        val vMenu = binding.playlistsFragmentAppBar?.playlistFragmentHeaderMenus
        vMenu?.alpha = 1f
        vMenu?.visibility = View.VISIBLE
        val vCreatePlaylist = binding.playlistsFragmentAppBar?.playlistFragmentHeaderCreatePlaylistLinearLayout
        vCreatePlaylist?.visibility = View.GONE
    }

    /***
     * Show the menu to create a playlist with animation
     */
    fun showCreateMenu(view: View) {
        val vMenu = binding.playlistsFragmentAppBar?.playlistFragmentHeaderMenus
        vMenu?.animate()?.alpha(0f)
                ?.withEndAction({ vMenu.visibility = View.GONE })?.start()
        val vCreatePlaylist = binding.playlistsFragmentAppBar?.playlistFragmentHeaderCreatePlaylistLinearLayout
        vCreatePlaylist?.visibility = View.VISIBLE
        vCreatePlaylist?.x = view.width.toFloat()
        val springX = SpringAnimation(vCreatePlaylist, DynamicAnimation.TRANSLATION_X, 0f)
        val springForceX = SpringForce(0f)
        springForceX.stiffness = SpringForce.STIFFNESS_LOW
        springForceX.dampingRatio = SpringForce.DAMPING_RATIO_LOW_BOUNCY
        springX.spring = springForceX
        springX.start()
    }

    /***
     * Hide the menu to create a playlist with animation
     */
    fun hideCreateMenu(@SuppressWarnings("unused") view: View) {
        val vMenu = binding.playlistsFragmentAppBar?.playlistFragmentHeaderMenus
        vMenu?.animate()?.alpha(1f)
                ?.withStartAction({ vMenu.visibility = View.VISIBLE })?.start()
        val vCreatePlaylist = binding.playlistsFragmentAppBar?.playlistFragmentHeaderCreatePlaylistLinearLayout
        val v = vCreatePlaylist?.width?.toFloat()!!
        val springX = SpringAnimation(vCreatePlaylist, DynamicAnimation.TRANSLATION_X, v)
        val springForceX = SpringForce(v)
        springForceX.stiffness = SpringForce.STIFFNESS_LOW
        springForceX.dampingRatio = SpringForce.DAMPING_RATIO_LOW_BOUNCY
        springX.spring = springForceX
        springX.start()
    }

    companion object {

        private val TAG = PlaylistsFragmentVM::class.java.simpleName
    }
}
