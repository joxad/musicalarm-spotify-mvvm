package com.startogamu.zikobot.home.artists

import android.databinding.ObservableBoolean
import android.os.Bundle
import android.support.v7.widget.GridLayoutManager
import android.support.v7.widget.RecyclerView
import com.joxad.androidtemplate.core.log.AppLog
import com.joxad.androidtemplate.core.view.utils.EndlessRecyclerOnScrollListener
import com.joxad.easydatabinding.fragment.v4.FragmentRecyclerBaseVM
import com.joxad.zikobot.data.db.ArtistManager
import com.joxad.zikobot.data.db.PlaylistManager
import com.startogamu.zikobot.BR
import com.startogamu.zikobot.R
import com.startogamu.zikobot.databinding.ArtistsFragmentBinding
import io.reactivex.disposables.Disposable


/**
 * Generated by generator-android-template
 */
class ArtistsFragmentVM(fragment: ArtistsFragment,
                        binding: ArtistsFragmentBinding, savedInstance: Bundle?) : FragmentRecyclerBaseVM<ArtistVM, ArtistsFragment, ArtistsFragmentBinding>(fragment, binding, savedInstance) {
    private lateinit var disposable: Disposable

    lateinit var loading: ObservableBoolean
    override fun itemLayoutResource(): Int {
        return R.layout.artist_item
    }

    override fun itemData(): Int {
        return BR.artistVM
    }


    override fun onCreate(savedInstance: Bundle?) {
        super.onCreate(savedInstance)
        loading = ObservableBoolean(true)

        updateList()

        binding.artistFragmentRV.addOnScrollListener(object : EndlessRecyclerOnScrollListener() {
            override fun onLoadMore(page: Int, totalItemsCount: Int, view: RecyclerView?) {
                addArtists(page)
            }
        })
        binding.artistFragmentRV.layoutManager = GridLayoutManager(fragment.context, 2)
        binding.fastScroller.setRecyclerView(binding.artistFragmentRV)
        binding.artistFragmentRV.addOnScrollListener(binding.fastScroller.onScrollListener)

    }

    override fun onResume() {
        super.onResume()
        disposable = PlaylistManager.INSTANCE.refreshSubject.subscribe({
            items.clear()
            updateList()
        })
    }

    private fun updateList() {
        addArtists(0)
    }


    private fun addArtists(offset: Int) {
        ArtistManager.findAllFavoritePaginated(offset)
                .subscribe({
                    loading.set(false)
                    for (artist in it) {
                        items.add(ArtistVM(fragment.context, artist))
                    }
                }, {
                    loading.set(false)
                    AppLog.INSTANCE.e("Artists", it.localizedMessage)
                })

    }

    override fun onPause() {
        super.onPause()
        if (!disposable.isDisposed)
            disposable.dispose()
    }

    companion object {

        private val TAG = ArtistsFragmentVM::class.java.simpleName
    }
}
