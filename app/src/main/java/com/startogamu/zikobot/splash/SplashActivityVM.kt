package com.startogamu.zikobot.splash

import android.Manifest
import android.databinding.ObservableBoolean
import android.os.Bundle
import android.view.View
import com.joxad.androidtemplate.core.log.AppLog
import com.joxad.easydatabinding.activity.ActivityBaseVM
import com.joxad.zikobot.data.module.localmusic.manager.LocalMusicManager
import com.startogamu.zikobot.NavigationManager
import com.startogamu.zikobot.R
import com.startogamu.zikobot.ZikobotApp
import com.startogamu.zikobot.databinding.SplashActivityBinding
import com.tbruyelle.rxpermissions2.RxPermissions
import io.reactivex.Observable
import io.reactivex.android.schedulers.AndroidSchedulers
import io.reactivex.disposables.Disposable
import io.reactivex.schedulers.Schedulers
import java.util.concurrent.TimeUnit
import javax.inject.Inject

/**
 * Generated by generator-android-template
 */
class SplashActivityVM
/***
 * @param activity
 * @param binding
 */
(activity: SplashActivity?, binding: SplashActivityBinding?, bundle: Bundle?) : ActivityBaseVM<SplashActivity, SplashActivityBinding>(activity, binding, bundle) {

    lateinit var loading: ObservableBoolean
    private var disposable: Disposable? = null
    private var rxPermission: RxPermissions? = null

    @Inject lateinit var localMusicManager: LocalMusicManager

    override fun onCreate(savedInstance: Bundle?) {
        ZikobotApp.localMusicComponent.inject(this)
        loading = ObservableBoolean(false)
        rxPermission = RxPermissions(activity)
        if (!rxPermission!!.isGranted(Manifest.permission.READ_EXTERNAL_STORAGE)) {
            binding.layoutLoadingState!!.loadingIndicator.visibility = View.INVISIBLE
            binding.splashPermBt.visibility = View.VISIBLE
            binding.splashPermBt.setOnClickListener { askPermissionAndSync() }
            binding.layoutLoadingState!!.root.setOnClickListener { askPermissionAndSync() }
            loading.set(true)
            binding.layoutLoadingState!!.loadingStateTitle.setText(R.string.permission_local)
        } else {
            binding.splashPermBt.visibility = View.GONE

            load(null)
        }
    }

    private fun startSyncService() {
        if (disposable == null || disposable!!.isDisposed) {
            val delayMin = Observable.just(1).delay(1, TimeUnit.SECONDS)
            disposable = localMusicManager.observeSynchro()
                    .subscribeOn(Schedulers.io())
                    .observeOn(AndroidSchedulers.mainThread())
                    .subscribe({
                        AppLog.INSTANCE.d("Synchro", "Done")
                        NavigationManager.goToHome(activity)
                        activity.finish()
                    }, {

                    })

        }
    }

    fun load(view: View?) {
        if (loading.get())
            return
        loading.set(true)
        askPermissionAndSync()
    }

    private fun askPermissionAndSync() {
        rxPermission!!.request(android.Manifest.permission.READ_EXTERNAL_STORAGE)
                .subscribe({
                    if (it) {
                        binding.splashPermBt.visibility = View.GONE
                        binding.layoutLoadingState!!.loadingStateTitle.setText(R.string.loading)
                        binding.layoutLoadingState!!.loadingIndicator.visibility = View.VISIBLE
                        startSyncService()
                    }
                }, { })

    }

    override fun onPause() {
        super.onPause()
        if (disposable != null && !disposable!!.isDisposed)
            disposable!!.dispose()
    }
}
