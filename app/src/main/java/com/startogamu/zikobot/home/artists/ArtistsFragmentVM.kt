package com.startogamu.zikobot.home.artists

import android.databinding.ObservableBoolean
import android.os.Bundle
import android.support.v7.widget.RecyclerView
import com.joxad.androidtemplate.core.log.AppLog
import com.joxad.androidtemplate.core.view.utils.EndlessRecyclerOnScrollListener
import com.joxad.easydatabinding.fragment.v4.FragmentRecyclerBaseVM
import com.joxad.zikobot.data.db.ArtistManager
import com.joxad.zikobot.data.db.model.ZikoArtist
import com.joxad.zikobot.data.module.localmusic.manager.LocalMusicManager
import com.startogamu.zikobot.BR
import com.startogamu.zikobot.R
import com.startogamu.zikobot.core.AlphabeticalAdapter
import com.startogamu.zikobot.core.AppUtils
import com.startogamu.zikobot.databinding.ArtistsFragmentBinding
import com.viethoa.models.AlphabetItem
import io.reactivex.android.schedulers.AndroidSchedulers
import io.reactivex.disposables.Disposable
import io.reactivex.schedulers.Schedulers


/**
 * Generated by generator-android-template
 */
class ArtistsFragmentVM(fragment: ArtistsFragment,
                        binding: ArtistsFragmentBinding, savedInstance: Bundle?) : FragmentRecyclerBaseVM<ArtistVM, ArtistsFragment, ArtistsFragmentBinding>(fragment, binding, savedInstance) {

    lateinit var loading: ObservableBoolean
    var disposable: Disposable? = null
    val adapter = AlphabeticalAdapter<ArtistVM>()
    override fun itemLayoutResource(): Int {
        return R.layout.artist_item
    }

    override fun itemData(): Int {
        return BR.artistVM
    }


    override fun onCreate(savedInstance: Bundle?) {
        super.onCreate(savedInstance)
        loading = ObservableBoolean(true)
        disposable = LocalMusicManager.INSTANCE.synchroDone
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(this::updateList)


        binding.artistFragmentRV.addOnScrollListener(object : EndlessRecyclerOnScrollListener() {
            override fun onLoadMore(page: Int, totalItemsCount: Int, view: RecyclerView?) {
                addArtists(page)
            }
        })

        binding.fastScroller.setRecyclerView(binding.artistFragmentRV)


    }



    override fun onDestroy() {
        if (disposable != null)
            disposable?.dispose()
        super.onDestroy()
    }

    private fun updateList(done: Boolean) {
        if (!done)
            return
        items.clear()
        handleArtistAlphabet()
        addArtists(0)
    }

    private fun handleArtistAlphabet() {

        ArtistManager.findAll()
                .subscribe({
                    AppUtils.setupAlphabet(binding.fastScroller,it.map { it.name }.toMutableList())
                }, {
                    AppLog.INSTANCE.e("Artists", it.localizedMessage)
                })
    }

    private fun addArtists(offset: Int) {
        ArtistManager.findAllPaginated(offset)
                .subscribe({
                    loading.set(false)
                    for (artist in it) {
                        items.add(ArtistVM(fragment.context, artist))
                    }
                }, {
                    loading.set(false)
                    AppLog.INSTANCE.e("Artists", it.localizedMessage)
                })

    }

    companion object {

        private val TAG = ArtistsFragmentVM::class.java.simpleName
    }
}
